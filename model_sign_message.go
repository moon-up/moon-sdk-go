/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SignMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignMessage{}

// SignMessage struct for SignMessage
type SignMessage struct {
	Name *string `json:"name,omitempty"`
	Data string `json:"data"`
	Encoding *string `json:"encoding,omitempty"`
	Header *bool `json:"header,omitempty"`
	Signtype *bool `json:"signtype,omitempty"`
}

type _SignMessage SignMessage

// NewSignMessage instantiates a new SignMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignMessage(data string) *SignMessage {
	this := SignMessage{}
	this.Data = data
	return &this
}

// NewSignMessageWithDefaults instantiates a new SignMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignMessageWithDefaults() *SignMessage {
	this := SignMessage{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SignMessage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignMessage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SignMessage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SignMessage) SetName(v string) {
	o.Name = &v
}

// GetData returns the Data field value
func (o *SignMessage) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SignMessage) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *SignMessage) SetData(v string) {
	o.Data = v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *SignMessage) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignMessage) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *SignMessage) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *SignMessage) SetEncoding(v string) {
	o.Encoding = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *SignMessage) GetHeader() bool {
	if o == nil || IsNil(o.Header) {
		var ret bool
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignMessage) GetHeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *SignMessage) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given bool and assigns it to the Header field.
func (o *SignMessage) SetHeader(v bool) {
	o.Header = &v
}

// GetSigntype returns the Signtype field value if set, zero value otherwise.
func (o *SignMessage) GetSigntype() bool {
	if o == nil || IsNil(o.Signtype) {
		var ret bool
		return ret
	}
	return *o.Signtype
}

// GetSigntypeOk returns a tuple with the Signtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignMessage) GetSigntypeOk() (*bool, bool) {
	if o == nil || IsNil(o.Signtype) {
		return nil, false
	}
	return o.Signtype, true
}

// HasSigntype returns a boolean if a field has been set.
func (o *SignMessage) HasSigntype() bool {
	if o != nil && !IsNil(o.Signtype) {
		return true
	}

	return false
}

// SetSigntype gets a reference to the given bool and assigns it to the Signtype field.
func (o *SignMessage) SetSigntype(v bool) {
	o.Signtype = &v
}

func (o SignMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["data"] = o.Data
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.Signtype) {
		toSerialize["signtype"] = o.Signtype
	}
	return toSerialize, nil
}

func (o *SignMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignMessage := _SignMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignMessage)

	if err != nil {
		return err
	}

	*o = SignMessage(varSignMessage)

	return err
}

type NullableSignMessage struct {
	value *SignMessage
	isSet bool
}

func (v NullableSignMessage) Get() *SignMessage {
	return v.value
}

func (v *NullableSignMessage) Set(val *SignMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSignMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSignMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignMessage(val *SignMessage) *NullableSignMessage {
	return &NullableSignMessage{value: val, isSet: true}
}

func (v NullableSignMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


