/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConveyorFinanceControllerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConveyorFinanceControllerResponse{}

// ConveyorFinanceControllerResponse struct for ConveyorFinanceControllerResponse
type ConveyorFinanceControllerResponse struct {
	Input *InputBody `json:"input,omitempty"`
	Convey *TransactionResponse `json:"convey,omitempty"`
	Data *TransactionData `json:"data,omitempty"`
	Tx *TransactionResponseTx `json:"tx,omitempty"`
	Signed *Transaction `json:"signed,omitempty"`
	Success bool `json:"success"`
	Message string `json:"message"`
}

type _ConveyorFinanceControllerResponse ConveyorFinanceControllerResponse

// NewConveyorFinanceControllerResponse instantiates a new ConveyorFinanceControllerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConveyorFinanceControllerResponse(success bool, message string) *ConveyorFinanceControllerResponse {
	this := ConveyorFinanceControllerResponse{}
	this.Success = success
	this.Message = message
	return &this
}

// NewConveyorFinanceControllerResponseWithDefaults instantiates a new ConveyorFinanceControllerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConveyorFinanceControllerResponseWithDefaults() *ConveyorFinanceControllerResponse {
	this := ConveyorFinanceControllerResponse{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ConveyorFinanceControllerResponse) GetInput() InputBody {
	if o == nil || IsNil(o.Input) {
		var ret InputBody
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetInputOk() (*InputBody, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ConveyorFinanceControllerResponse) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given InputBody and assigns it to the Input field.
func (o *ConveyorFinanceControllerResponse) SetInput(v InputBody) {
	o.Input = &v
}

// GetConvey returns the Convey field value if set, zero value otherwise.
func (o *ConveyorFinanceControllerResponse) GetConvey() TransactionResponse {
	if o == nil || IsNil(o.Convey) {
		var ret TransactionResponse
		return ret
	}
	return *o.Convey
}

// GetConveyOk returns a tuple with the Convey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetConveyOk() (*TransactionResponse, bool) {
	if o == nil || IsNil(o.Convey) {
		return nil, false
	}
	return o.Convey, true
}

// HasConvey returns a boolean if a field has been set.
func (o *ConveyorFinanceControllerResponse) HasConvey() bool {
	if o != nil && !IsNil(o.Convey) {
		return true
	}

	return false
}

// SetConvey gets a reference to the given TransactionResponse and assigns it to the Convey field.
func (o *ConveyorFinanceControllerResponse) SetConvey(v TransactionResponse) {
	o.Convey = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConveyorFinanceControllerResponse) GetData() TransactionData {
	if o == nil || IsNil(o.Data) {
		var ret TransactionData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetDataOk() (*TransactionData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConveyorFinanceControllerResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given TransactionData and assigns it to the Data field.
func (o *ConveyorFinanceControllerResponse) SetData(v TransactionData) {
	o.Data = &v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *ConveyorFinanceControllerResponse) GetTx() TransactionResponseTx {
	if o == nil || IsNil(o.Tx) {
		var ret TransactionResponseTx
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetTxOk() (*TransactionResponseTx, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *ConveyorFinanceControllerResponse) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given TransactionResponseTx and assigns it to the Tx field.
func (o *ConveyorFinanceControllerResponse) SetTx(v TransactionResponseTx) {
	o.Tx = &v
}

// GetSigned returns the Signed field value if set, zero value otherwise.
func (o *ConveyorFinanceControllerResponse) GetSigned() Transaction {
	if o == nil || IsNil(o.Signed) {
		var ret Transaction
		return ret
	}
	return *o.Signed
}

// GetSignedOk returns a tuple with the Signed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetSignedOk() (*Transaction, bool) {
	if o == nil || IsNil(o.Signed) {
		return nil, false
	}
	return o.Signed, true
}

// HasSigned returns a boolean if a field has been set.
func (o *ConveyorFinanceControllerResponse) HasSigned() bool {
	if o != nil && !IsNil(o.Signed) {
		return true
	}

	return false
}

// SetSigned gets a reference to the given Transaction and assigns it to the Signed field.
func (o *ConveyorFinanceControllerResponse) SetSigned(v Transaction) {
	o.Signed = &v
}

// GetSuccess returns the Success field value
func (o *ConveyorFinanceControllerResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ConveyorFinanceControllerResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetMessage returns the Message field value
func (o *ConveyorFinanceControllerResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ConveyorFinanceControllerResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ConveyorFinanceControllerResponse) SetMessage(v string) {
	o.Message = v
}

func (o ConveyorFinanceControllerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConveyorFinanceControllerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Convey) {
		toSerialize["convey"] = o.Convey
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.Signed) {
		toSerialize["signed"] = o.Signed
	}
	toSerialize["success"] = o.Success
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *ConveyorFinanceControllerResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConveyorFinanceControllerResponse := _ConveyorFinanceControllerResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConveyorFinanceControllerResponse)

	if err != nil {
		return err
	}

	*o = ConveyorFinanceControllerResponse(varConveyorFinanceControllerResponse)

	return err
}

type NullableConveyorFinanceControllerResponse struct {
	value *ConveyorFinanceControllerResponse
	isSet bool
}

func (v NullableConveyorFinanceControllerResponse) Get() *ConveyorFinanceControllerResponse {
	return v.value
}

func (v *NullableConveyorFinanceControllerResponse) Set(val *ConveyorFinanceControllerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConveyorFinanceControllerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConveyorFinanceControllerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConveyorFinanceControllerResponse(val *ConveyorFinanceControllerResponse) *NullableConveyorFinanceControllerResponse {
	return &NullableConveyorFinanceControllerResponse{value: val, isSet: true}
}

func (v NullableConveyorFinanceControllerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConveyorFinanceControllerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


