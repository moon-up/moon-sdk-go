/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CryptoCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoCurrency{}

// CryptoCurrency struct for CryptoCurrency
type CryptoCurrency struct {
	NetworkDisplayName string `json:"networkDisplayName"`
	Icon string `json:"icon"`
	ChainId float64 `json:"chainId"`
	Address string `json:"address"`
	Decimals float64 `json:"decimals"`
	Network string `json:"network"`
	Symbol string `json:"symbol"`
	Name string `json:"name"`
	Code string `json:"code"`
	Id string `json:"id"`
}

type _CryptoCurrency CryptoCurrency

// NewCryptoCurrency instantiates a new CryptoCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoCurrency(networkDisplayName string, icon string, chainId float64, address string, decimals float64, network string, symbol string, name string, code string, id string) *CryptoCurrency {
	this := CryptoCurrency{}
	this.NetworkDisplayName = networkDisplayName
	this.Icon = icon
	this.ChainId = chainId
	this.Address = address
	this.Decimals = decimals
	this.Network = network
	this.Symbol = symbol
	this.Name = name
	this.Code = code
	this.Id = id
	return &this
}

// NewCryptoCurrencyWithDefaults instantiates a new CryptoCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoCurrencyWithDefaults() *CryptoCurrency {
	this := CryptoCurrency{}
	return &this
}

// GetNetworkDisplayName returns the NetworkDisplayName field value
func (o *CryptoCurrency) GetNetworkDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDisplayName
}

// GetNetworkDisplayNameOk returns a tuple with the NetworkDisplayName field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetNetworkDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDisplayName, true
}

// SetNetworkDisplayName sets field value
func (o *CryptoCurrency) SetNetworkDisplayName(v string) {
	o.NetworkDisplayName = v
}

// GetIcon returns the Icon field value
func (o *CryptoCurrency) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *CryptoCurrency) SetIcon(v string) {
	o.Icon = v
}

// GetChainId returns the ChainId field value
func (o *CryptoCurrency) GetChainId() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetChainIdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *CryptoCurrency) SetChainId(v float64) {
	o.ChainId = v
}

// GetAddress returns the Address field value
func (o *CryptoCurrency) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CryptoCurrency) SetAddress(v string) {
	o.Address = v
}

// GetDecimals returns the Decimals field value
func (o *CryptoCurrency) GetDecimals() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetDecimalsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *CryptoCurrency) SetDecimals(v float64) {
	o.Decimals = v
}

// GetNetwork returns the Network field value
func (o *CryptoCurrency) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *CryptoCurrency) SetNetwork(v string) {
	o.Network = v
}

// GetSymbol returns the Symbol field value
func (o *CryptoCurrency) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *CryptoCurrency) SetSymbol(v string) {
	o.Symbol = v
}

// GetName returns the Name field value
func (o *CryptoCurrency) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CryptoCurrency) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *CryptoCurrency) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CryptoCurrency) SetCode(v string) {
	o.Code = v
}

// GetId returns the Id field value
func (o *CryptoCurrency) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CryptoCurrency) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CryptoCurrency) SetId(v string) {
	o.Id = v
}

func (o CryptoCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["networkDisplayName"] = o.NetworkDisplayName
	toSerialize["icon"] = o.Icon
	toSerialize["chainId"] = o.ChainId
	toSerialize["address"] = o.Address
	toSerialize["decimals"] = o.Decimals
	toSerialize["network"] = o.Network
	toSerialize["symbol"] = o.Symbol
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *CryptoCurrency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkDisplayName",
		"icon",
		"chainId",
		"address",
		"decimals",
		"network",
		"symbol",
		"name",
		"code",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoCurrency := _CryptoCurrency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoCurrency)

	if err != nil {
		return err
	}

	*o = CryptoCurrency(varCryptoCurrency)

	return err
}

type NullableCryptoCurrency struct {
	value *CryptoCurrency
	isSet bool
}

func (v NullableCryptoCurrency) Get() *CryptoCurrency {
	return v.value
}

func (v *NullableCryptoCurrency) Set(val *CryptoCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoCurrency(val *CryptoCurrency) *NullableCryptoCurrency {
	return &NullableCryptoCurrency{value: val, isSet: true}
}

func (v NullableCryptoCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


