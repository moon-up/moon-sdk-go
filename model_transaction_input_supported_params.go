/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionInputSupportedParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionInputSupportedParams{}

// TransactionInputSupportedParams struct for TransactionInputSupportedParams
type TransactionInputSupportedParams struct {
	PartnerData TransactionInputSupportedParamsPartnerData `json:"partnerData"`
	Theme TransactionInputSupportedParamsTheme `json:"theme"`
}

type _TransactionInputSupportedParams TransactionInputSupportedParams

// NewTransactionInputSupportedParams instantiates a new TransactionInputSupportedParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionInputSupportedParams(partnerData TransactionInputSupportedParamsPartnerData, theme TransactionInputSupportedParamsTheme) *TransactionInputSupportedParams {
	this := TransactionInputSupportedParams{}
	this.PartnerData = partnerData
	this.Theme = theme
	return &this
}

// NewTransactionInputSupportedParamsWithDefaults instantiates a new TransactionInputSupportedParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionInputSupportedParamsWithDefaults() *TransactionInputSupportedParams {
	this := TransactionInputSupportedParams{}
	return &this
}

// GetPartnerData returns the PartnerData field value
func (o *TransactionInputSupportedParams) GetPartnerData() TransactionInputSupportedParamsPartnerData {
	if o == nil {
		var ret TransactionInputSupportedParamsPartnerData
		return ret
	}

	return o.PartnerData
}

// GetPartnerDataOk returns a tuple with the PartnerData field value
// and a boolean to check if the value has been set.
func (o *TransactionInputSupportedParams) GetPartnerDataOk() (*TransactionInputSupportedParamsPartnerData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartnerData, true
}

// SetPartnerData sets field value
func (o *TransactionInputSupportedParams) SetPartnerData(v TransactionInputSupportedParamsPartnerData) {
	o.PartnerData = v
}

// GetTheme returns the Theme field value
func (o *TransactionInputSupportedParams) GetTheme() TransactionInputSupportedParamsTheme {
	if o == nil {
		var ret TransactionInputSupportedParamsTheme
		return ret
	}

	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value
// and a boolean to check if the value has been set.
func (o *TransactionInputSupportedParams) GetThemeOk() (*TransactionInputSupportedParamsTheme, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Theme, true
}

// SetTheme sets field value
func (o *TransactionInputSupportedParams) SetTheme(v TransactionInputSupportedParamsTheme) {
	o.Theme = v
}

func (o TransactionInputSupportedParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionInputSupportedParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["partnerData"] = o.PartnerData
	toSerialize["theme"] = o.Theme
	return toSerialize, nil
}

func (o *TransactionInputSupportedParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"partnerData",
		"theme",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionInputSupportedParams := _TransactionInputSupportedParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionInputSupportedParams)

	if err != nil {
		return err
	}

	*o = TransactionInputSupportedParams(varTransactionInputSupportedParams)

	return err
}

type NullableTransactionInputSupportedParams struct {
	value *TransactionInputSupportedParams
	isSet bool
}

func (v NullableTransactionInputSupportedParams) Get() *TransactionInputSupportedParams {
	return v.value
}

func (v *NullableTransactionInputSupportedParams) Set(val *TransactionInputSupportedParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionInputSupportedParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionInputSupportedParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionInputSupportedParams(val *TransactionInputSupportedParams) *NullableTransactionInputSupportedParams {
	return &NullableTransactionInputSupportedParams{value: val, isSet: true}
}

func (v NullableTransactionInputSupportedParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionInputSupportedParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


