/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type BitcoinAPI interface {

	/*
	CreateBitcoinAccount Method for CreateBitcoinAccount

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BitcoinAPICreateBitcoinAccountRequest
	*/
	CreateBitcoinAccount(ctx context.Context) BitcoinAPICreateBitcoinAccountRequest

	// CreateBitcoinAccountExecute executes the request
	//  @return AccountAPIResponse
	CreateBitcoinAccountExecute(r BitcoinAPICreateBitcoinAccountRequest) (*AccountAPIResponse, *http.Response, error)

	/*
	GetBitcoinAccount Method for GetBitcoinAccount

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountName
	@return BitcoinAPIGetBitcoinAccountRequest
	*/
	GetBitcoinAccount(ctx context.Context, accountName string) BitcoinAPIGetBitcoinAccountRequest

	// GetBitcoinAccountExecute executes the request
	//  @return AccountAPIResponse
	GetBitcoinAccountExecute(r BitcoinAPIGetBitcoinAccountRequest) (*AccountAPIResponse, *http.Response, error)

	/*
	ListBitcoinAccounts Method for ListBitcoinAccounts

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BitcoinAPIListBitcoinAccountsRequest
	*/
	ListBitcoinAccounts(ctx context.Context) BitcoinAPIListBitcoinAccountsRequest

	// ListBitcoinAccountsExecute executes the request
	//  @return AccountAPIResponse
	ListBitcoinAccountsExecute(r BitcoinAPIListBitcoinAccountsRequest) (*AccountAPIResponse, *http.Response, error)

	/*
	SignBitcoinTransaction Method for SignBitcoinTransaction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountName
	@return BitcoinAPISignBitcoinTransactionRequest
	*/
	SignBitcoinTransaction(ctx context.Context, accountName string) BitcoinAPISignBitcoinTransactionRequest

	// SignBitcoinTransactionExecute executes the request
	//  @return BitcoinAPIResponse
	SignBitcoinTransactionExecute(r BitcoinAPISignBitcoinTransactionRequest) (*BitcoinAPIResponse, *http.Response, error)
}

// BitcoinAPIService BitcoinAPI service
type BitcoinAPIService service

type BitcoinAPICreateBitcoinAccountRequest struct {
	ctx context.Context
	ApiService BitcoinAPI
	authorization *string
	bitcoinInput *BitcoinInput
}

func (r BitcoinAPICreateBitcoinAccountRequest) Authorization(authorization string) BitcoinAPICreateBitcoinAccountRequest {
	r.authorization = &authorization
	return r
}

func (r BitcoinAPICreateBitcoinAccountRequest) BitcoinInput(bitcoinInput BitcoinInput) BitcoinAPICreateBitcoinAccountRequest {
	r.bitcoinInput = &bitcoinInput
	return r
}

func (r BitcoinAPICreateBitcoinAccountRequest) Execute() (*AccountAPIResponse, *http.Response, error) {
	return r.ApiService.CreateBitcoinAccountExecute(r)
}

/*
CreateBitcoinAccount Method for CreateBitcoinAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BitcoinAPICreateBitcoinAccountRequest
*/
func (a *BitcoinAPIService) CreateBitcoinAccount(ctx context.Context) BitcoinAPICreateBitcoinAccountRequest {
	return BitcoinAPICreateBitcoinAccountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountAPIResponse
func (a *BitcoinAPIService) CreateBitcoinAccountExecute(r BitcoinAPICreateBitcoinAccountRequest) (*AccountAPIResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountAPIResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BitcoinAPIService.CreateBitcoinAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bitcoin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.bitcoinInput == nil {
		return localVarReturnValue, nil, reportError("bitcoinInput is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.bitcoinInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BitcoinAPIGetBitcoinAccountRequest struct {
	ctx context.Context
	ApiService BitcoinAPI
	authorization *string
	accountName string
}

func (r BitcoinAPIGetBitcoinAccountRequest) Authorization(authorization string) BitcoinAPIGetBitcoinAccountRequest {
	r.authorization = &authorization
	return r
}

func (r BitcoinAPIGetBitcoinAccountRequest) Execute() (*AccountAPIResponse, *http.Response, error) {
	return r.ApiService.GetBitcoinAccountExecute(r)
}

/*
GetBitcoinAccount Method for GetBitcoinAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountName
 @return BitcoinAPIGetBitcoinAccountRequest
*/
func (a *BitcoinAPIService) GetBitcoinAccount(ctx context.Context, accountName string) BitcoinAPIGetBitcoinAccountRequest {
	return BitcoinAPIGetBitcoinAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountName: accountName,
	}
}

// Execute executes the request
//  @return AccountAPIResponse
func (a *BitcoinAPIService) GetBitcoinAccountExecute(r BitcoinAPIGetBitcoinAccountRequest) (*AccountAPIResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountAPIResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BitcoinAPIService.GetBitcoinAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bitcoin/{accountName}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountName"+"}", url.PathEscape(parameterValueToString(r.accountName, "accountName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BitcoinAPIListBitcoinAccountsRequest struct {
	ctx context.Context
	ApiService BitcoinAPI
	authorization *string
}

func (r BitcoinAPIListBitcoinAccountsRequest) Authorization(authorization string) BitcoinAPIListBitcoinAccountsRequest {
	r.authorization = &authorization
	return r
}

func (r BitcoinAPIListBitcoinAccountsRequest) Execute() (*AccountAPIResponse, *http.Response, error) {
	return r.ApiService.ListBitcoinAccountsExecute(r)
}

/*
ListBitcoinAccounts Method for ListBitcoinAccounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BitcoinAPIListBitcoinAccountsRequest
*/
func (a *BitcoinAPIService) ListBitcoinAccounts(ctx context.Context) BitcoinAPIListBitcoinAccountsRequest {
	return BitcoinAPIListBitcoinAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountAPIResponse
func (a *BitcoinAPIService) ListBitcoinAccountsExecute(r BitcoinAPIListBitcoinAccountsRequest) (*AccountAPIResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountAPIResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BitcoinAPIService.ListBitcoinAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bitcoin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BitcoinAPISignBitcoinTransactionRequest struct {
	ctx context.Context
	ApiService BitcoinAPI
	authorization *string
	accountName string
	bitcoinTransactionInput *BitcoinTransactionInput
}

func (r BitcoinAPISignBitcoinTransactionRequest) Authorization(authorization string) BitcoinAPISignBitcoinTransactionRequest {
	r.authorization = &authorization
	return r
}

func (r BitcoinAPISignBitcoinTransactionRequest) BitcoinTransactionInput(bitcoinTransactionInput BitcoinTransactionInput) BitcoinAPISignBitcoinTransactionRequest {
	r.bitcoinTransactionInput = &bitcoinTransactionInput
	return r
}

func (r BitcoinAPISignBitcoinTransactionRequest) Execute() (*BitcoinAPIResponse, *http.Response, error) {
	return r.ApiService.SignBitcoinTransactionExecute(r)
}

/*
SignBitcoinTransaction Method for SignBitcoinTransaction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountName
 @return BitcoinAPISignBitcoinTransactionRequest
*/
func (a *BitcoinAPIService) SignBitcoinTransaction(ctx context.Context, accountName string) BitcoinAPISignBitcoinTransactionRequest {
	return BitcoinAPISignBitcoinTransactionRequest{
		ApiService: a,
		ctx: ctx,
		accountName: accountName,
	}
}

// Execute executes the request
//  @return BitcoinAPIResponse
func (a *BitcoinAPIService) SignBitcoinTransactionExecute(r BitcoinAPISignBitcoinTransactionRequest) (*BitcoinAPIResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BitcoinAPIResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BitcoinAPIService.SignBitcoinTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bitcoin/{accountName}/sign-tx"
	localVarPath = strings.Replace(localVarPath, "{"+"accountName"+"}", url.PathEscape(parameterValueToString(r.accountName, "accountName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.bitcoinTransactionInput == nil {
		return localVarReturnValue, nil, reportError("bitcoinTransactionInput is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	// body params
	localVarPostBody = r.bitcoinTransactionInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
