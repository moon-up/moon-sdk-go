/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupportedAssetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedAssetResponse{}

// SupportedAssetResponse struct for SupportedAssetResponse
type SupportedAssetResponse struct {
	Country string `json:"country"`
	Assets []SupportedAssetResponseAssetsInner `json:"assets"`
}

type _SupportedAssetResponse SupportedAssetResponse

// NewSupportedAssetResponse instantiates a new SupportedAssetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedAssetResponse(country string, assets []SupportedAssetResponseAssetsInner) *SupportedAssetResponse {
	this := SupportedAssetResponse{}
	this.Country = country
	this.Assets = assets
	return &this
}

// NewSupportedAssetResponseWithDefaults instantiates a new SupportedAssetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedAssetResponseWithDefaults() *SupportedAssetResponse {
	this := SupportedAssetResponse{}
	return &this
}

// GetCountry returns the Country field value
func (o *SupportedAssetResponse) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *SupportedAssetResponse) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *SupportedAssetResponse) SetCountry(v string) {
	o.Country = v
}

// GetAssets returns the Assets field value
func (o *SupportedAssetResponse) GetAssets() []SupportedAssetResponseAssetsInner {
	if o == nil {
		var ret []SupportedAssetResponseAssetsInner
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *SupportedAssetResponse) GetAssetsOk() ([]SupportedAssetResponseAssetsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assets, true
}

// SetAssets sets field value
func (o *SupportedAssetResponse) SetAssets(v []SupportedAssetResponseAssetsInner) {
	o.Assets = v
}

func (o SupportedAssetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedAssetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country"] = o.Country
	toSerialize["assets"] = o.Assets
	return toSerialize, nil
}

func (o *SupportedAssetResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country",
		"assets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupportedAssetResponse := _SupportedAssetResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupportedAssetResponse)

	if err != nil {
		return err
	}

	*o = SupportedAssetResponse(varSupportedAssetResponse)

	return err
}

type NullableSupportedAssetResponse struct {
	value *SupportedAssetResponse
	isSet bool
}

func (v NullableSupportedAssetResponse) Get() *SupportedAssetResponse {
	return v.value
}

func (v *NullableSupportedAssetResponse) Set(val *SupportedAssetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedAssetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedAssetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedAssetResponse(val *SupportedAssetResponse) *NullableSupportedAssetResponse {
	return &NullableSupportedAssetResponse{value: val, isSet: true}
}

func (v NullableSupportedAssetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedAssetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


