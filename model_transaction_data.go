/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionData{}

// TransactionData struct for TransactionData
type TransactionData struct {
	MoonScanUrl *string `json:"moon_scan_url,omitempty"`
	TransactionHash string `json:"transaction_hash"`
	SignedTransaction string `json:"signed_transaction"`
	SignedMessage *string `json:"signed_message,omitempty"`
	RawTransaction *string `json:"raw_transaction,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Transaction *Tx `json:"transaction,omitempty"`
	UserOps []TransactionRequest `json:"userOps,omitempty"`
	UseropTransaction *string `json:"userop_transaction,omitempty"`
}

type _TransactionData TransactionData

// NewTransactionData instantiates a new TransactionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionData(transactionHash string, signedTransaction string) *TransactionData {
	this := TransactionData{}
	this.TransactionHash = transactionHash
	this.SignedTransaction = signedTransaction
	return &this
}

// NewTransactionDataWithDefaults instantiates a new TransactionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDataWithDefaults() *TransactionData {
	this := TransactionData{}
	return &this
}

// GetMoonScanUrl returns the MoonScanUrl field value if set, zero value otherwise.
func (o *TransactionData) GetMoonScanUrl() string {
	if o == nil || IsNil(o.MoonScanUrl) {
		var ret string
		return ret
	}
	return *o.MoonScanUrl
}

// GetMoonScanUrlOk returns a tuple with the MoonScanUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetMoonScanUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MoonScanUrl) {
		return nil, false
	}
	return o.MoonScanUrl, true
}

// HasMoonScanUrl returns a boolean if a field has been set.
func (o *TransactionData) HasMoonScanUrl() bool {
	if o != nil && !IsNil(o.MoonScanUrl) {
		return true
	}

	return false
}

// SetMoonScanUrl gets a reference to the given string and assigns it to the MoonScanUrl field.
func (o *TransactionData) SetMoonScanUrl(v string) {
	o.MoonScanUrl = &v
}

// GetTransactionHash returns the TransactionHash field value
func (o *TransactionData) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *TransactionData) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *TransactionData) SetTransactionHash(v string) {
	o.TransactionHash = v
}

// GetSignedTransaction returns the SignedTransaction field value
func (o *TransactionData) GetSignedTransaction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignedTransaction
}

// GetSignedTransactionOk returns a tuple with the SignedTransaction field value
// and a boolean to check if the value has been set.
func (o *TransactionData) GetSignedTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignedTransaction, true
}

// SetSignedTransaction sets field value
func (o *TransactionData) SetSignedTransaction(v string) {
	o.SignedTransaction = v
}

// GetSignedMessage returns the SignedMessage field value if set, zero value otherwise.
func (o *TransactionData) GetSignedMessage() string {
	if o == nil || IsNil(o.SignedMessage) {
		var ret string
		return ret
	}
	return *o.SignedMessage
}

// GetSignedMessageOk returns a tuple with the SignedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetSignedMessageOk() (*string, bool) {
	if o == nil || IsNil(o.SignedMessage) {
		return nil, false
	}
	return o.SignedMessage, true
}

// HasSignedMessage returns a boolean if a field has been set.
func (o *TransactionData) HasSignedMessage() bool {
	if o != nil && !IsNil(o.SignedMessage) {
		return true
	}

	return false
}

// SetSignedMessage gets a reference to the given string and assigns it to the SignedMessage field.
func (o *TransactionData) SetSignedMessage(v string) {
	o.SignedMessage = &v
}

// GetRawTransaction returns the RawTransaction field value if set, zero value otherwise.
func (o *TransactionData) GetRawTransaction() string {
	if o == nil || IsNil(o.RawTransaction) {
		var ret string
		return ret
	}
	return *o.RawTransaction
}

// GetRawTransactionOk returns a tuple with the RawTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetRawTransactionOk() (*string, bool) {
	if o == nil || IsNil(o.RawTransaction) {
		return nil, false
	}
	return o.RawTransaction, true
}

// HasRawTransaction returns a boolean if a field has been set.
func (o *TransactionData) HasRawTransaction() bool {
	if o != nil && !IsNil(o.RawTransaction) {
		return true
	}

	return false
}

// SetRawTransaction gets a reference to the given string and assigns it to the RawTransaction field.
func (o *TransactionData) SetRawTransaction(v string) {
	o.RawTransaction = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *TransactionData) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *TransactionData) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *TransactionData) SetSignature(v string) {
	o.Signature = &v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *TransactionData) GetTransaction() Tx {
	if o == nil || IsNil(o.Transaction) {
		var ret Tx
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetTransactionOk() (*Tx, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *TransactionData) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given Tx and assigns it to the Transaction field.
func (o *TransactionData) SetTransaction(v Tx) {
	o.Transaction = &v
}

// GetUserOps returns the UserOps field value if set, zero value otherwise.
func (o *TransactionData) GetUserOps() []TransactionRequest {
	if o == nil || IsNil(o.UserOps) {
		var ret []TransactionRequest
		return ret
	}
	return o.UserOps
}

// GetUserOpsOk returns a tuple with the UserOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetUserOpsOk() ([]TransactionRequest, bool) {
	if o == nil || IsNil(o.UserOps) {
		return nil, false
	}
	return o.UserOps, true
}

// HasUserOps returns a boolean if a field has been set.
func (o *TransactionData) HasUserOps() bool {
	if o != nil && !IsNil(o.UserOps) {
		return true
	}

	return false
}

// SetUserOps gets a reference to the given []TransactionRequest and assigns it to the UserOps field.
func (o *TransactionData) SetUserOps(v []TransactionRequest) {
	o.UserOps = v
}

// GetUseropTransaction returns the UseropTransaction field value if set, zero value otherwise.
func (o *TransactionData) GetUseropTransaction() string {
	if o == nil || IsNil(o.UseropTransaction) {
		var ret string
		return ret
	}
	return *o.UseropTransaction
}

// GetUseropTransactionOk returns a tuple with the UseropTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetUseropTransactionOk() (*string, bool) {
	if o == nil || IsNil(o.UseropTransaction) {
		return nil, false
	}
	return o.UseropTransaction, true
}

// HasUseropTransaction returns a boolean if a field has been set.
func (o *TransactionData) HasUseropTransaction() bool {
	if o != nil && !IsNil(o.UseropTransaction) {
		return true
	}

	return false
}

// SetUseropTransaction gets a reference to the given string and assigns it to the UseropTransaction field.
func (o *TransactionData) SetUseropTransaction(v string) {
	o.UseropTransaction = &v
}

func (o TransactionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MoonScanUrl) {
		toSerialize["moon_scan_url"] = o.MoonScanUrl
	}
	toSerialize["transaction_hash"] = o.TransactionHash
	toSerialize["signed_transaction"] = o.SignedTransaction
	if !IsNil(o.SignedMessage) {
		toSerialize["signed_message"] = o.SignedMessage
	}
	if !IsNil(o.RawTransaction) {
		toSerialize["raw_transaction"] = o.RawTransaction
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	if !IsNil(o.UserOps) {
		toSerialize["userOps"] = o.UserOps
	}
	if !IsNil(o.UseropTransaction) {
		toSerialize["userop_transaction"] = o.UseropTransaction
	}
	return toSerialize, nil
}

func (o *TransactionData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_hash",
		"signed_transaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionData := _TransactionData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionData)

	if err != nil {
		return err
	}

	*o = TransactionData(varTransactionData)

	return err
}

type NullableTransactionData struct {
	value *TransactionData
	isSet bool
}

func (v NullableTransactionData) Get() *TransactionData {
	return v.value
}

func (v *NullableTransactionData) Set(val *TransactionData) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionData) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionData(val *TransactionData) *NullableTransactionData {
	return &NullableTransactionData{value: val, isSet: true}
}

func (v NullableTransactionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


