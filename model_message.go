/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Message{}

// Message struct for Message
type Message struct {
	Fiat []FiatCurrency `json:"fiat"`
	Crypto []CryptoCurrency `json:"crypto"`
}

type _Message Message

// NewMessage instantiates a new Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage(fiat []FiatCurrency, crypto []CryptoCurrency) *Message {
	this := Message{}
	this.Fiat = fiat
	this.Crypto = crypto
	return &this
}

// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetFiat returns the Fiat field value
func (o *Message) GetFiat() []FiatCurrency {
	if o == nil {
		var ret []FiatCurrency
		return ret
	}

	return o.Fiat
}

// GetFiatOk returns a tuple with the Fiat field value
// and a boolean to check if the value has been set.
func (o *Message) GetFiatOk() ([]FiatCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fiat, true
}

// SetFiat sets field value
func (o *Message) SetFiat(v []FiatCurrency) {
	o.Fiat = v
}

// GetCrypto returns the Crypto field value
func (o *Message) GetCrypto() []CryptoCurrency {
	if o == nil {
		var ret []CryptoCurrency
		return ret
	}

	return o.Crypto
}

// GetCryptoOk returns a tuple with the Crypto field value
// and a boolean to check if the value has been set.
func (o *Message) GetCryptoOk() ([]CryptoCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return o.Crypto, true
}

// SetCrypto sets field value
func (o *Message) SetCrypto(v []CryptoCurrency) {
	o.Crypto = v
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fiat"] = o.Fiat
	toSerialize["crypto"] = o.Crypto
	return toSerialize, nil
}

func (o *Message) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fiat",
		"crypto",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessage := _Message{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessage)

	if err != nil {
		return err
	}

	*o = Message(varMessage)

	return err
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


