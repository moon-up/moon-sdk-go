/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
)

// checks if the AaveInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AaveInput{}

// AaveInput struct for AaveInput
type AaveInput struct {
	To *string `json:"to,omitempty"`
	Data *string `json:"data,omitempty"`
	Input *string `json:"input,omitempty"`
	Value *string `json:"value,omitempty"`
	Nonce *string `json:"nonce,omitempty"`
	Gas *string `json:"gas,omitempty"`
	GasPrice *string `json:"gasPrice,omitempty"`
	ChainId *string `json:"chain_id,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	EOA *bool `json:"EOA,omitempty"`
	ContractAddress *string `json:"contract_address,omitempty"`
	TokenId *string `json:"token_id,omitempty"`
	TokenIds *string `json:"token_ids,omitempty"`
	Approved *bool `json:"approved,omitempty"`
	Broadcast *bool `json:"broadcast,omitempty"`
	LendingPool *string `json:"lending_pool,omitempty"`
	Amount *string `json:"amount,omitempty"`
	AtokenToRedeeem *string `json:"atoken_to_redeeem,omitempty"`
	RefCode *string `json:"ref_code,omitempty"`
	InterestRateMode *string `json:"interest_rate_mode,omitempty"`
}

// NewAaveInput instantiates a new AaveInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAaveInput() *AaveInput {
	this := AaveInput{}
	return &this
}

// NewAaveInputWithDefaults instantiates a new AaveInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAaveInputWithDefaults() *AaveInput {
	this := AaveInput{}
	return &this
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *AaveInput) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *AaveInput) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *AaveInput) SetTo(v string) {
	o.To = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AaveInput) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AaveInput) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *AaveInput) SetData(v string) {
	o.Data = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *AaveInput) GetInput() string {
	if o == nil || IsNil(o.Input) {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetInputOk() (*string, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *AaveInput) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *AaveInput) SetInput(v string) {
	o.Input = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AaveInput) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AaveInput) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AaveInput) SetValue(v string) {
	o.Value = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *AaveInput) GetNonce() string {
	if o == nil || IsNil(o.Nonce) {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetNonceOk() (*string, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *AaveInput) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *AaveInput) SetNonce(v string) {
	o.Nonce = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *AaveInput) GetGas() string {
	if o == nil || IsNil(o.Gas) {
		var ret string
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetGasOk() (*string, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *AaveInput) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given string and assigns it to the Gas field.
func (o *AaveInput) SetGas(v string) {
	o.Gas = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *AaveInput) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *AaveInput) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *AaveInput) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *AaveInput) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *AaveInput) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *AaveInput) SetChainId(v string) {
	o.ChainId = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *AaveInput) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *AaveInput) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *AaveInput) SetEncoding(v string) {
	o.Encoding = &v
}

// GetEOA returns the EOA field value if set, zero value otherwise.
func (o *AaveInput) GetEOA() bool {
	if o == nil || IsNil(o.EOA) {
		var ret bool
		return ret
	}
	return *o.EOA
}

// GetEOAOk returns a tuple with the EOA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetEOAOk() (*bool, bool) {
	if o == nil || IsNil(o.EOA) {
		return nil, false
	}
	return o.EOA, true
}

// HasEOA returns a boolean if a field has been set.
func (o *AaveInput) HasEOA() bool {
	if o != nil && !IsNil(o.EOA) {
		return true
	}

	return false
}

// SetEOA gets a reference to the given bool and assigns it to the EOA field.
func (o *AaveInput) SetEOA(v bool) {
	o.EOA = &v
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *AaveInput) GetContractAddress() string {
	if o == nil || IsNil(o.ContractAddress) {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetContractAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContractAddress) {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *AaveInput) HasContractAddress() bool {
	if o != nil && !IsNil(o.ContractAddress) {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *AaveInput) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *AaveInput) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *AaveInput) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *AaveInput) SetTokenId(v string) {
	o.TokenId = &v
}

// GetTokenIds returns the TokenIds field value if set, zero value otherwise.
func (o *AaveInput) GetTokenIds() string {
	if o == nil || IsNil(o.TokenIds) {
		var ret string
		return ret
	}
	return *o.TokenIds
}

// GetTokenIdsOk returns a tuple with the TokenIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetTokenIdsOk() (*string, bool) {
	if o == nil || IsNil(o.TokenIds) {
		return nil, false
	}
	return o.TokenIds, true
}

// HasTokenIds returns a boolean if a field has been set.
func (o *AaveInput) HasTokenIds() bool {
	if o != nil && !IsNil(o.TokenIds) {
		return true
	}

	return false
}

// SetTokenIds gets a reference to the given string and assigns it to the TokenIds field.
func (o *AaveInput) SetTokenIds(v string) {
	o.TokenIds = &v
}

// GetApproved returns the Approved field value if set, zero value otherwise.
func (o *AaveInput) GetApproved() bool {
	if o == nil || IsNil(o.Approved) {
		var ret bool
		return ret
	}
	return *o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetApprovedOk() (*bool, bool) {
	if o == nil || IsNil(o.Approved) {
		return nil, false
	}
	return o.Approved, true
}

// HasApproved returns a boolean if a field has been set.
func (o *AaveInput) HasApproved() bool {
	if o != nil && !IsNil(o.Approved) {
		return true
	}

	return false
}

// SetApproved gets a reference to the given bool and assigns it to the Approved field.
func (o *AaveInput) SetApproved(v bool) {
	o.Approved = &v
}

// GetBroadcast returns the Broadcast field value if set, zero value otherwise.
func (o *AaveInput) GetBroadcast() bool {
	if o == nil || IsNil(o.Broadcast) {
		var ret bool
		return ret
	}
	return *o.Broadcast
}

// GetBroadcastOk returns a tuple with the Broadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetBroadcastOk() (*bool, bool) {
	if o == nil || IsNil(o.Broadcast) {
		return nil, false
	}
	return o.Broadcast, true
}

// HasBroadcast returns a boolean if a field has been set.
func (o *AaveInput) HasBroadcast() bool {
	if o != nil && !IsNil(o.Broadcast) {
		return true
	}

	return false
}

// SetBroadcast gets a reference to the given bool and assigns it to the Broadcast field.
func (o *AaveInput) SetBroadcast(v bool) {
	o.Broadcast = &v
}

// GetLendingPool returns the LendingPool field value if set, zero value otherwise.
func (o *AaveInput) GetLendingPool() string {
	if o == nil || IsNil(o.LendingPool) {
		var ret string
		return ret
	}
	return *o.LendingPool
}

// GetLendingPoolOk returns a tuple with the LendingPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetLendingPoolOk() (*string, bool) {
	if o == nil || IsNil(o.LendingPool) {
		return nil, false
	}
	return o.LendingPool, true
}

// HasLendingPool returns a boolean if a field has been set.
func (o *AaveInput) HasLendingPool() bool {
	if o != nil && !IsNil(o.LendingPool) {
		return true
	}

	return false
}

// SetLendingPool gets a reference to the given string and assigns it to the LendingPool field.
func (o *AaveInput) SetLendingPool(v string) {
	o.LendingPool = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AaveInput) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AaveInput) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *AaveInput) SetAmount(v string) {
	o.Amount = &v
}

// GetAtokenToRedeeem returns the AtokenToRedeeem field value if set, zero value otherwise.
func (o *AaveInput) GetAtokenToRedeeem() string {
	if o == nil || IsNil(o.AtokenToRedeeem) {
		var ret string
		return ret
	}
	return *o.AtokenToRedeeem
}

// GetAtokenToRedeeemOk returns a tuple with the AtokenToRedeeem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetAtokenToRedeeemOk() (*string, bool) {
	if o == nil || IsNil(o.AtokenToRedeeem) {
		return nil, false
	}
	return o.AtokenToRedeeem, true
}

// HasAtokenToRedeeem returns a boolean if a field has been set.
func (o *AaveInput) HasAtokenToRedeeem() bool {
	if o != nil && !IsNil(o.AtokenToRedeeem) {
		return true
	}

	return false
}

// SetAtokenToRedeeem gets a reference to the given string and assigns it to the AtokenToRedeeem field.
func (o *AaveInput) SetAtokenToRedeeem(v string) {
	o.AtokenToRedeeem = &v
}

// GetRefCode returns the RefCode field value if set, zero value otherwise.
func (o *AaveInput) GetRefCode() string {
	if o == nil || IsNil(o.RefCode) {
		var ret string
		return ret
	}
	return *o.RefCode
}

// GetRefCodeOk returns a tuple with the RefCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetRefCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RefCode) {
		return nil, false
	}
	return o.RefCode, true
}

// HasRefCode returns a boolean if a field has been set.
func (o *AaveInput) HasRefCode() bool {
	if o != nil && !IsNil(o.RefCode) {
		return true
	}

	return false
}

// SetRefCode gets a reference to the given string and assigns it to the RefCode field.
func (o *AaveInput) SetRefCode(v string) {
	o.RefCode = &v
}

// GetInterestRateMode returns the InterestRateMode field value if set, zero value otherwise.
func (o *AaveInput) GetInterestRateMode() string {
	if o == nil || IsNil(o.InterestRateMode) {
		var ret string
		return ret
	}
	return *o.InterestRateMode
}

// GetInterestRateModeOk returns a tuple with the InterestRateMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AaveInput) GetInterestRateModeOk() (*string, bool) {
	if o == nil || IsNil(o.InterestRateMode) {
		return nil, false
	}
	return o.InterestRateMode, true
}

// HasInterestRateMode returns a boolean if a field has been set.
func (o *AaveInput) HasInterestRateMode() bool {
	if o != nil && !IsNil(o.InterestRateMode) {
		return true
	}

	return false
}

// SetInterestRateMode gets a reference to the given string and assigns it to the InterestRateMode field.
func (o *AaveInput) SetInterestRateMode(v string) {
	o.InterestRateMode = &v
}

func (o AaveInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AaveInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	if !IsNil(o.GasPrice) {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.EOA) {
		toSerialize["EOA"] = o.EOA
	}
	if !IsNil(o.ContractAddress) {
		toSerialize["contract_address"] = o.ContractAddress
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.TokenIds) {
		toSerialize["token_ids"] = o.TokenIds
	}
	if !IsNil(o.Approved) {
		toSerialize["approved"] = o.Approved
	}
	if !IsNil(o.Broadcast) {
		toSerialize["broadcast"] = o.Broadcast
	}
	if !IsNil(o.LendingPool) {
		toSerialize["lending_pool"] = o.LendingPool
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AtokenToRedeeem) {
		toSerialize["atoken_to_redeeem"] = o.AtokenToRedeeem
	}
	if !IsNil(o.RefCode) {
		toSerialize["ref_code"] = o.RefCode
	}
	if !IsNil(o.InterestRateMode) {
		toSerialize["interest_rate_mode"] = o.InterestRateMode
	}
	return toSerialize, nil
}

type NullableAaveInput struct {
	value *AaveInput
	isSet bool
}

func (v NullableAaveInput) Get() *AaveInput {
	return v.value
}

func (v *NullableAaveInput) Set(val *AaveInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAaveInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAaveInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAaveInput(val *AaveInput) *NullableAaveInput {
	return &NullableAaveInput{value: val, isSet: true}
}

func (v NullableAaveInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAaveInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


