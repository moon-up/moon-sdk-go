/*
moon-vault-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package moonsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupportedPaymentTypesMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedPaymentTypesMessage{}

// SupportedPaymentTypesMessage struct for SupportedPaymentTypesMessage
type SupportedPaymentTypesMessage struct {
	Googlepay PaymentType `json:"googlepay"`
	Applepay PaymentType `json:"applepay"`
	Creditcard PaymentType `json:"creditcard"`
}

type _SupportedPaymentTypesMessage SupportedPaymentTypesMessage

// NewSupportedPaymentTypesMessage instantiates a new SupportedPaymentTypesMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedPaymentTypesMessage(googlepay PaymentType, applepay PaymentType, creditcard PaymentType) *SupportedPaymentTypesMessage {
	this := SupportedPaymentTypesMessage{}
	this.Googlepay = googlepay
	this.Applepay = applepay
	this.Creditcard = creditcard
	return &this
}

// NewSupportedPaymentTypesMessageWithDefaults instantiates a new SupportedPaymentTypesMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedPaymentTypesMessageWithDefaults() *SupportedPaymentTypesMessage {
	this := SupportedPaymentTypesMessage{}
	return &this
}

// GetGooglepay returns the Googlepay field value
func (o *SupportedPaymentTypesMessage) GetGooglepay() PaymentType {
	if o == nil {
		var ret PaymentType
		return ret
	}

	return o.Googlepay
}

// GetGooglepayOk returns a tuple with the Googlepay field value
// and a boolean to check if the value has been set.
func (o *SupportedPaymentTypesMessage) GetGooglepayOk() (*PaymentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Googlepay, true
}

// SetGooglepay sets field value
func (o *SupportedPaymentTypesMessage) SetGooglepay(v PaymentType) {
	o.Googlepay = v
}

// GetApplepay returns the Applepay field value
func (o *SupportedPaymentTypesMessage) GetApplepay() PaymentType {
	if o == nil {
		var ret PaymentType
		return ret
	}

	return o.Applepay
}

// GetApplepayOk returns a tuple with the Applepay field value
// and a boolean to check if the value has been set.
func (o *SupportedPaymentTypesMessage) GetApplepayOk() (*PaymentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Applepay, true
}

// SetApplepay sets field value
func (o *SupportedPaymentTypesMessage) SetApplepay(v PaymentType) {
	o.Applepay = v
}

// GetCreditcard returns the Creditcard field value
func (o *SupportedPaymentTypesMessage) GetCreditcard() PaymentType {
	if o == nil {
		var ret PaymentType
		return ret
	}

	return o.Creditcard
}

// GetCreditcardOk returns a tuple with the Creditcard field value
// and a boolean to check if the value has been set.
func (o *SupportedPaymentTypesMessage) GetCreditcardOk() (*PaymentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Creditcard, true
}

// SetCreditcard sets field value
func (o *SupportedPaymentTypesMessage) SetCreditcard(v PaymentType) {
	o.Creditcard = v
}

func (o SupportedPaymentTypesMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedPaymentTypesMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["googlepay"] = o.Googlepay
	toSerialize["applepay"] = o.Applepay
	toSerialize["creditcard"] = o.Creditcard
	return toSerialize, nil
}

func (o *SupportedPaymentTypesMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"googlepay",
		"applepay",
		"creditcard",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupportedPaymentTypesMessage := _SupportedPaymentTypesMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupportedPaymentTypesMessage)

	if err != nil {
		return err
	}

	*o = SupportedPaymentTypesMessage(varSupportedPaymentTypesMessage)

	return err
}

type NullableSupportedPaymentTypesMessage struct {
	value *SupportedPaymentTypesMessage
	isSet bool
}

func (v NullableSupportedPaymentTypesMessage) Get() *SupportedPaymentTypesMessage {
	return v.value
}

func (v *NullableSupportedPaymentTypesMessage) Set(val *SupportedPaymentTypesMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedPaymentTypesMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedPaymentTypesMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedPaymentTypesMessage(val *SupportedPaymentTypesMessage) *NullableSupportedPaymentTypesMessage {
	return &NullableSupportedPaymentTypesMessage{value: val, isSet: true}
}

func (v NullableSupportedPaymentTypesMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedPaymentTypesMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


